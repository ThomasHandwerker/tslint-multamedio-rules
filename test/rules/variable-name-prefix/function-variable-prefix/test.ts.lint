// global context
//  var gValidNameGlobal1 = "Hey";
//  var gVALIDNAMEGLOBAL2 = "there";

//  var invalidGlobal1 = "how";
//  var iNvalidGlobal2 = "are";
//  var tInvalidGlobal3 = "you";
//  var aInvalidGlobal4 = "today";

var gGlobalFunc = function(aParameter, tParameter, invalidParam1) {
    var tValidFunc1 = "Func";
    var tVALIDFUNC2 = "tion";

    var iNvAlIDFunc1 = "is";
        ~~~~~~~~~~~~                    [variable name in function/method scope must start with "t" as prefix followed by an uppercase letter]
    var aINVALIDFunc2 = "invalid";
        ~~~~~~~~~~~~~                   [variable name in function/method scope must start with "t" as prefix followed by an uppercase letter]
}


// function context
function testFunction(aParameter, tParameter) {
    var iInvalidFunc3 = "Wow";
        ~~~~~~~~~~~~~               [variable name in function/method scope must start with "t" as prefix followed by an uppercase letter]
    var iNVALIDFunc4 = "there";
        ~~~~~~~~~~~~                [variable name in function/method scope must start with "t" as prefix followed by an uppercase letter]

    var tValidFunc3 = 1;
    var tVALIDFUNC4 = 3;

    try {}
    catch(aValidExceptionParam) {}

    try {}
    catch(invalidExceptionParam) {}

    for (let i :number = 0; i < 10; i++) {
    }
}


// class context
class TestClass {
    private iClassValid1 = "My";
    public iClassValid2 = "Name";
    public abstract iClassValid3 = "is"
    private classInvalid1 = "User";
    protected classInvalid2 = "";
    public gClassInvalid3 = "User";
    public tClassInvalid4 = "Name";


    public testMethod1(invalidParam1, aParameterValid1) {
        var tValidName1 = "Hello";
        let tValidName2 = "World";
        const tValidName3 = ".";
    }

    private invalidTestMethod1(aValidParam2, gInvalidParameter2) {
        var invalidName1 = "How";
            ~~~~~~~~~~~~                    [variable name in function/method scope must start with "t" as prefix followed by an uppercase letter]
        let testInvalidName2 = "are";
            ~~~~~~~~~~~~~~~~                [variable name in function/method scope must start with "t" as prefix followed by an uppercase letter]
        const gVariable = "you";
              ~~~~~~~~~                     [variable name in function/method scope must start with "t" as prefix followed by an uppercase letter]
    }
}

// test *.spec file context
describe('sample test suite', () => {
  var gTestSuiteVar :number = 0;

  it('should return true', () => {
    var tTestCaseVar :number = 10;
  }
}
